// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Пользователь системы
model User {
  id            String         @id @default(uuid())
  email         String         @unique
  emailVerified Boolean        @default(false)
  role          String         @default("user") // "user" | "admin"
  firstName     String?
  lastName      String?
  phone         String?
  position      String?
  company       String?
  
  // Управление доступом по времени
  accessFrom    DateTime?      // Дата начала доступа
  accessUntil   DateTime?      // Дата окончания доступа
  accessComment String?        // Комментарий администратора
  accessUpdatedBy String?      // Email администратора, который последний раз обновлял доступ
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  organizations Organization[]
  documents     Document[]
  demoStatus    DemoStatus?
  accessHistory AccessHistory[]
  refreshTokens RefreshToken[]
  emailVerifications EmailVerification[]

  @@index([email])
  @@index([accessUntil])
}

// Одноразовые коды для входа по email
model LoginToken {
  id         String   @id @default(uuid())
  email      String
  code       String   // 6-digit code
  token      String   @unique
  expiresAt  DateTime
  used       Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@index([email])
  @@index([code])
  @@index([token])
  @@index([expiresAt])
}

// Организация пользователя
model Organization {
  id              String    @id @default(uuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Основные данные
  is_default      Boolean   @default(false)
  subject_type    String    // "legal_entity" | "sole_proprietor"
  name_full       String
  name_short      String?
  inn             String
  kpp             String?
  ogrn            String?
  ogrnip          String?
  okpo            String?
  okved           String?

  // Адреса и контакты
  address_legal   String
  address_postal  String?
  phone           String?
  email           String
  website         String?

  // Руководитель и полномочия
  head_title      String
  head_fio        String
  authority_base  String    // "Устава" | "Доверенности"
  poa_number      String?
  poa_date        String?

  // Банковские реквизиты
  bank_bik        String
  bank_name       String
  bank_ks         String
  bank_rs         String

  // Дополнительная информация
  seal_note       String?
  notes           String?

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  documents       Document[]

  @@index([userId])
  @@index([inn])
  @@index([subject_type])
  @@index([is_default])
}

// Документ
model Document {
  id                String    @id @default(uuid())
  userId            String
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  organizationId    String?
  organization      Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)

  title             String?
  templateCode      String
  templateVersion   String
  bodyText          String?   @db.Text
  requisites        Json?     // Гибкое хранение реквизитов
  hasBodyChat       Boolean   @default(false)

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([userId])
  @@index([templateCode])
  @@index([createdAt])
}

// Статус демо-доступа пользователя
model DemoStatus {
  id              String    @id @default(uuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  documentsUsed   Int       @default(0)
  documentsLimit  Int       @default(5)
  isActive        Boolean   @default(true)
  expiresAt       DateTime?

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Конфигурация реквизитов для шаблона (только для админа)
model TemplateConfig {
  id              String    @id @default(uuid())
  templateCode    String    @unique
  requisitesConfig Json?    // Настройки полей реквизитов из админки

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([templateCode])
}

// Шаблоны документов (хранение в БД для CRUD в админке)
model Template {
  id               String    @id @default(uuid())
  code             String    @unique
  nameRu           String
  shortDescription String
  hasBodyChat      Boolean   @default(false)
  category         String
  tags             String[]
  isEnabled        Boolean   @default(true)
  version          String

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@index([code])
  @@index([category])
  @@index([isEnabled])
}

// История изменений доступа пользователей
model AccessHistory {
  id              String    @id @default(uuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  action          String    // "grant_or_extend" | "revoke" | "disable"
  accessFrom      DateTime?
  accessUntil     DateTime?
  comment         String?   // Комментарий администратора
  updatedBy       String    // Email администратора
  
  createdAt       DateTime  @default(now())

  @@index([userId])
  @@index([createdAt])
}

// Refresh токены для обновления JWT
model RefreshToken {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token       String   @unique
  expiresAt   DateTime
  revoked     Boolean  @default(false)
  revokedAt   DateTime?
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

// Верификация email при смене
model EmailVerification {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  newEmail    String
  code        String   // 6-digit code
  token       String   @unique
  expiresAt   DateTime
  used        Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([token])
  @@index([code])
  @@index([expiresAt])
}
