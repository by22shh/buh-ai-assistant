"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { toast } from "sonner";

export default function LoginPage() {
  const router = useRouter();
  const [step, setStep] = useState<"email" | "code">("email");
  const [email, setEmail] = useState("");
  const [code, setCode] = useState("");
  const [token, setToken] = useState("");
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);

  const handleEmailSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    setLoading(true);

    // Validate email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      setError("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å");
      setLoading(false);
      return;
    }

    try {
      const response = await fetch('/api/auth/send-code', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email })
      });

      const data = await response.json();

      if (!data.success) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞');
      }

      setToken(data.token);
      setStep("code");

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ —Ç–æ–ª—å–∫–æ –≤ development
      if (data.code) {
        toast.success(`–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${email}`, {
          description: `–ö–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${data.code}`,
          duration: 10000
        });
      } else {
        toast.success(`–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${email}`);
      }
    } catch (err: any) {
      setError(err.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞");
    } finally {
      setLoading(false);
    }
  };

  const handleCodeSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    setLoading(true);

    if (code.length !== 6) {
      setError("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 6 —Ü–∏—Ñ—Ä");
      setLoading(false);
      return;
    }

    try {
      const response = await fetch('/api/auth/verify-code', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, code })
      });

      const data = await response.json();

      if (!data.success) {
        throw new Error(data.error || '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥');
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      toast.success(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å${data.user?.firstName ? `, ${data.user.firstName}` : ''}!`);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
      const redirectUrl = data.user?.role === "admin" ? "/admin/templates" : "/templates";

      // –û—Ç–ª–∞–¥–∫–∞
      console.log('üç™ Checking cookies IMMEDIATELY after login:', document.cookie);
      console.log('‚úÖ User data:', data.user);
      console.log('üîÑ Will redirect to:', redirectUrl);

      // –í–ê–ñ–ù–û: Cookie —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Å–µ—Ä–≤–µ—Ä–æ–º, –¥–∞–µ–º –≤—Ä–µ–º—è
      // –î–µ–ª–∞–µ–º –ü–û–õ–ù–£–Æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ window.location
      setTimeout(() => {
        const cookiesNow = document.cookie;
        console.log('üç™ Cookies BEFORE redirect:', cookiesNow);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
        const hasToken = cookiesNow.includes('token=');
        console.log('üîç Token cookie present?', hasToken);

        if (!hasToken) {
          console.error('‚ùå WARNING: Token cookie NOT found! Cookie may not be set properly.');
        }

        // –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        console.log('‚û°Ô∏è Redirecting NOW to:', redirectUrl);
        window.location.href = redirectUrl;
      }, 1000);
    } catch (err: any) {
      setError(err.message || "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-muted/50 px-4">
      <Card className="w-full max-w-md">
        <CardHeader className="text-center">
          <CardTitle className="text-2xl mb-2">–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</CardTitle>
          <CardDescription>
            {step === "email"
              ? "–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞"
              : `–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${email}`}
          </CardDescription>
        </CardHeader>
        <CardContent>
          {step === "email" ? (
            <form onSubmit={handleEmailSubmit} className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="email">Email –∞–¥—Ä–µ—Å</Label>
                <Input
                  id="email"
                  type="email"
                  placeholder="your@email.com"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  required
                  autoFocus
                />
              </div>
              {error && (
                <p className="text-sm text-destructive">{error}</p>
              )}
              <Button type="submit" className="w-full" disabled={loading}>
                {loading ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥"}
              </Button>
            </form>
          ) : (
            <div className="space-y-4">
              <form onSubmit={handleCodeSubmit} className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="code">6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥</Label>
                  <Input
                    id="code"
                    type="text"
                    placeholder="123456"
                    value={code}
                    onChange={(e) => setCode(e.target.value.replace(/\D/g, '').slice(0, 6))}
                    maxLength={6}
                    required
                    autoFocus
                  />
                  <p className="text-xs text-muted-foreground">
                    –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –º—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏
                  </p>
                </div>
                {error && (
                  <p className="text-sm text-destructive">{error}</p>
                )}
                <Button type="submit" className="w-full" disabled={loading}>
                  {loading ? "–ü—Ä–æ–≤–µ—Ä–∫–∞..." : "–í–æ–π—Ç–∏"}
                </Button>
              </form>

              <Button
                type="button"
                variant="outline"
                onClick={() => {
                  setStep("email");
                  setCode("");
                  setError("");
                }}
                className="w-full"
              >
                –ò–∑–º–µ–Ω–∏—Ç—å email
              </Button>

              <div className="text-center">
                <button
                  type="button"
                  onClick={() => handleEmailSubmit(new Event('submit') as any)}
                  disabled={loading}
                  className="text-sm text-primary hover:underline"
                >
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ
                </button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
