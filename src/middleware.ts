import { NextRequest, NextResponse } from 'next/server';
import { getTokenFromRequest, verifyToken } from './lib/jwt';
import { checkApiRateLimit, getIP } from './lib/rate-limit';

// –ü—É–±–ª–∏—á–Ω—ã–µ –ø—É—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const PUBLIC_PATHS = [
  '/api/auth/send-code',
  '/api/auth/verify-code',
];

// DEBUG: –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º middleware –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
const SKIP_MIDDLEWARE = true;

// –ê–¥–º–∏–Ω—Å–∫–∏–µ –ø—É—Ç–∏
const ADMIN_PATHS = [
  '/api/admin/',
];

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ-API –∑–∞–ø—Ä–æ—Å—ã
  if (!pathname.startsWith('/api/')) {
    return NextResponse.next();
  }

  // –í–†–ï–ú–ï–ù–ù–û: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ API –∑–∞–ø—Ä–æ—Å—ã, –∫–∞–∂–¥—ã–π route –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å–∞–º
  if (SKIP_MIDDLEWARE) {
    console.log('‚ö†Ô∏è Middleware skipped for:', pathname);
    return NextResponse.next();
  }

  // Rate limiting –¥–ª—è –≤—Å–µ—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤
  const ip = getIP(request);
  const rateLimitResult = await checkApiRateLimit(ip);

  if (!rateLimitResult.success) {
    return NextResponse.json(
      {
        error: 'Too Many Requests',
        message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        retryAfter: Math.ceil((rateLimitResult.reset - Date.now()) / 1000)
      },
      {
        status: 429,
        headers: {
          'X-RateLimit-Limit': rateLimitResult.limit.toString(),
          'X-RateLimit-Remaining': rateLimitResult.remaining.toString(),
          'X-RateLimit-Reset': rateLimitResult.reset.toString(),
        }
      }
    );
  }

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –ø—É—Ç–∏
  if (PUBLIC_PATHS.some(path => pathname.startsWith(path))) {
    return NextResponse.next();
  }

  // –û—Ç–ª–∞–¥–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ cookies
  console.log('üîç Middleware checking:', pathname);
  console.log('üç™ All cookies:', request.cookies.getAll());
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω
  const token = getTokenFromRequest(request);
  console.log('üîë Token from request:', token ? `${token.substring(0, 20)}...` : 'null');

  if (!token) {
    console.log('‚ùå Middleware: No token provided for', pathname);
    console.log('üç™ Cookie names:', request.cookies.getAll().map(c => `${c.name}=${c.value?.substring(0, 10)}...`));
    console.log('üîç Authorization header:', request.headers.get('authorization'));
    return NextResponse.json(
      { error: 'Unauthorized', message: 'No token provided' },
      { status: 401 }
    );
  }

  const payload = verifyToken(token);

  if (!payload) {
    console.log('‚ùå Middleware: Invalid or expired token for', pathname);
    return NextResponse.json(
      { error: 'Unauthorized', message: 'Invalid or expired token' },
      { status: 401 }
    );
  }

  console.log('‚úÖ Middleware: Token valid for', pathname, '- User:', payload.email);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω—Å–∫–∏–º –ø—É—Ç—è–º
  if (ADMIN_PATHS.some(path => pathname.startsWith(path))) {
    if (payload.role !== 'admin') {
      return NextResponse.json(
        { error: 'Forbidden', message: 'Admin access required' },
        { status: 403 }
      );
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º payload –≤ headers –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ API routes
  const requestHeaders = new Headers(request.headers);
  requestHeaders.set('x-user-id', payload.userId);
  requestHeaders.set('x-user-email', payload.email);
  requestHeaders.set('x-user-role', payload.role);

  return NextResponse.next({
    request: {
      headers: requestHeaders,
    },
  });
}

export const config = {
  matcher: '/api/:path*',
};
