import jwt from 'jsonwebtoken';
import { NextRequest, NextResponse } from 'next/server';

const JWT_SECRET = process.env.JWT_SECRET || 'fallback-secret-key-change-in-production';
const JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || '7d';

// –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
console.log('üîê JWT Module loaded');
console.log('üîë JWT_SECRET exists:', !!process.env.JWT_SECRET);
console.log('üîë JWT_SECRET value:', JWT_SECRET.substring(0, 30) + '...');
console.log('‚è∞ JWT_EXPIRES_IN:', JWT_EXPIRES_IN);

export interface JWTPayload {
  userId: string;
  email: string;
  role: string;
}

/**
 * –°–æ–∑–¥–∞—Ç—å JWT —Ç–æ–∫–µ–Ω
 */
export function createToken(payload: JWTPayload): string {
  console.log('üî® Creating JWT token with payload:', payload);
  console.log('üîë Using JWT_SECRET:', JWT_SECRET.substring(0, 20) + '...');
  console.log('‚è∞ Token expires in:', JWT_EXPIRES_IN);
  
  const token = jwt.sign(
    payload,
    JWT_SECRET,
    {
      expiresIn: JWT_EXPIRES_IN,
    } as jwt.SignOptions
  );
  
  console.log('‚úÖ Token created, length:', token.length);
  
  return token;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JWT —Ç–æ–∫–µ–Ω
 */
export function verifyToken(token: string): JWTPayload | null {
  try {
    console.log('üîç Verifying JWT token...');
    console.log('üîë JWT_SECRET:', JWT_SECRET.substring(0, 20) + '...');
    console.log('üìù Token preview:', token.substring(0, 50) + '...');
    
    const decoded = jwt.verify(token, JWT_SECRET) as JWTPayload;
    
    console.log('‚úÖ JWT verification successful:', {
      userId: decoded.userId,
      email: decoded.email,
      role: decoded.role
    });
    
    return decoded;
  } catch (error) {
    console.error('‚ùå JWT verification failed:', error);
    if (error instanceof Error) {
      console.error('Error name:', error.name);
      console.error('Error message:', error.message);
    }
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ request (cookie –∏–ª–∏ header)
 */
export function getTokenFromRequest(request: NextRequest): string | null {
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º cookie
  const cookieToken = request.cookies.get('token')?.value;
  if (cookieToken) {
    console.log('üç™ Token found in cookie');
    return cookieToken;
  }

  // –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º Authorization header
  const authHeader = request.headers.get('authorization');
  if (authHeader?.startsWith('Bearer ')) {
    console.log('üîë Token found in Authorization header');
    return authHeader.substring(7);
  }

  console.log('‚ùå No token found in request (checked cookie and header)');
  return null;
}

/**
 * –°–æ–∑–¥–∞—Ç—å response —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π cookie –¥–ª—è —Ç–æ–∫–µ–Ω–∞
 */
export function setTokenCookie(response: NextResponse, token: string): NextResponse {
  const isProduction = process.env.NODE_ENV === 'production';

  // –í production: httpOnly=true, secure=true –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  // –í development: httpOnly=false, secure=false –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  const cookieOptions = {
    httpOnly: true, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    secure: isProduction, // true –Ω–∞ production (HTTPS), false –Ω–∞ localhost
    sameSite: 'lax' as const,
    maxAge: 60 * 60 * 24 * 7, // 7 –¥–Ω–µ–π
    path: '/',
  };

  response.cookies.set('token', token, cookieOptions);

  console.log('üç™ Cookie set with options:', {
    ...cookieOptions,
    NODE_ENV: process.env.NODE_ENV,
    isProduction,
    tokenPreview: token.substring(0, 20) + '...',
    url: 'Check if cookie is sent in subsequent requests'
  });

  // –¢–∞–∫–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ Set-Cookie –∑–∞–≥–æ–ª–æ–≤–æ–∫ —è–≤–Ω–æ
  const cookieString = [
    `token=${token}`,
    'Path=/',
    `Max-Age=${cookieOptions.maxAge}`,
    'SameSite=Lax',
    cookieOptions.httpOnly ? 'HttpOnly' : '',
    cookieOptions.secure ? 'Secure' : '',
  ].filter(Boolean).join('; ');
  
  console.log('üç™ Set-Cookie header:', cookieString);

  return response;
}

/**
 * –£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ cookie
 */
export function clearTokenCookie(response: NextResponse): NextResponse {
  response.cookies.delete('token');
  return response;
}
