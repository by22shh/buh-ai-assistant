{
  "meta": {
    "project": "Бухгалтерский ИИ-Помощник",
    "date": "2025-10-29",
    "prepared_by": "Software Development Manager"
  },
  "product_overview": "Бухгалтерский ИИ-Помощник — это веб-приложение для автоматизации создания и редактирования бухгалтерских и юридических документов на основе готовых шаблонов с интеграцией ИИ для редактирования текста, безопасным хранением и автоматической подстановкой реквизитов организаций.",
  "core_goals": [
    "Обеспечить простой и безопасный вход пользователей через OTP авторизацию с ролями admin и user.",
    "Предоставить гибкую систему управления шаблонами документов с версионированием и публикацией.",
    "Реализовать удобные пользовательские интерфейсы для выбора, редактирования и создания документов.",
    "Обеспечить точную и безопасную валидацию и автоподстановку реквизитов организаций согласно законодательству и требованиям 152-ФЗ.",
    "Обеспечить механизм контроля доступа пользователей, ограничений по демо-периоду и управления подписками.",
    "Интегрировать генерацию документов в форматах DOCX и PDF с сохранением истории и архивом пользователя."
  ],
  "key_features": [
    "OTP авторизация через Auth4App с ролями admin и user, контролем доступа по периоду действия и редиректом на экран 'Демо закончился' при истечении доступа.",
    "Каталог шаблонов документов с полнотекстовым поиском, фильтрацией по категориям и тегам, сортировкой и разграничением интерфейса для админов и пользователей.",
    "Управление шаблонами (создание, редактирование, публикация, управление версиями и реквизитами) админом.",
    "Автоподстановка реквизитов из выбранной организации в форму документа на основе version-специфичного списка реквизитов.",
    "Модуль проверки реквизитов в тексте документа, блокирующая отправку реквизитов в ИИ чат.",
    "Тело документа через чат с ИИ с валидацией на отсутствие реквизитов и сохранением текста для последующей генерации документа.",
    "Управление организациями пользователя (создание, редактирование, просмотр) с валидацией всех полей по строгой JSON-схеме и бизнес-правилам.",
    "Генерация и скачивание документов в форматах DOCX и PDF на основе заполненных шаблонов, версии и данных пользователя.",
    "Админская панель контроля доступа и подписок с возможностью вручную выдавать, продлевать и отключать доступ пользователям.",
    "Личный кабинет пользователя с отображением информации о тарифе, использовании демо-доступа, контактами менеджера и доступом к архиву документов."
  ],
  "user_flow_summary": [
    "Пользователь входит в систему через OTP, подтверждая телефон через сервис Auth4App. После успешной аутентификации получает JWT токен с ролями и датами доступа.",
    "Пользователь выбирает шаблон из каталога (с возможностью поиска и фильтра по категориям и тегам) и запускает создание документа.",
    "Если выбран шаблон с телом документа, пользователь взаимодействует с ИИ чатом, не отправляя туда реквизиты. После получения валидного текста переходит к заполнению реквизитов.",
    "Пользователь выбирает организацию из своих или создаёт новую, подтягивает реквизиты по шаблону, редактирует их и сохраняет форму.",
    "Пользователь собирает документ, формирует файл DOCX или PDF и скачивает его. Все созданные документы сохраняются в архиве.",
    "Если у пользователя истёк период доступа, он попадает на экран «Демо закончился» с CTA к менеджеру в Telegram.",
    "Администратор управляет шаблонами (создаёт, редактирует, назначает реквизиты, публикует), а также контролирует доступ пользователей (выдача, продление, отключение) через отдельную админ-панель."
  ],
  "validation_criteria": [
    "Валидация всех реквизитов организаций и документов по строгой JSON-схеме с ECMA-совместимыми регулярными выражениями и проверками контрольных сумм (ИНН, ОГРН и др.).",
    "Валидация уникальности и формата системных имен шаблонов (`snake_case`) и версий в формате SemVer.",
    "Блокировка отправки текста в ИИ чат при обнаружении реквизитов согласно модулю requisitesGuard.js с выводом единой ошибки.",
    "Контроль доступа на backend и frontend по JWT токену и датам `access_from` и `access_until`, с возвращением 403 ACCESS_EXPIRED при истечении.",
    "Интерфейсы отвечают макетам, предоставленным в документации, включая логику навигации и активности кнопок.",
    "Автоматическое подтягивание реквизитов из выбранной организации по полям, назначенным в текущей версии шаблона, без перезаписи вручную изменённых данных после подтягивания.",
    "Обработка ошибок при загрузке и валидациях форм, показ inline-ошибок и системных тостов.",
    "Админские функции доступны только пользователям с ролью admin, пользовательские функции только для ролей user.",
    "При публикации шаблона проверяются обязательные поля и соответствие всех требований, иначе показывается предупреждающий модал.",
    "Переходы и редиректы соответствуют описанным маршрутам, включая редирект на экран «Демо закончился» для заблокированных пользователей."
  ],
  "code_summary": {
    "tech_stack": [
      "TypeScript",
      "Next.js 15",
      "PostgreSQL",
      "Prisma ORM",
      "React",
      "JWT",
      "OpenAI",
      "Nodemailer"
    ],
    "features": [
      {
        "name": "Authentication - Send Code",
        "description": "Send 6-digit verification code to email for user login. Implements rate limiting and security measures to prevent timing attacks.",
        "files": [
          "src/app/api/auth/send-code/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Send Code API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/auth/send-code": {
              "post": {
                "summary": "Send verification code to email",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "email": {
                            "type": "string",
                            "format": "email"
                          }
                        },
                        "required": [
                          "email"
                        ]
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Code sent successfully",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "success": {
                              "type": "boolean"
                            },
                            "message": {
                              "type": "string"
                            },
                            "token": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "400": {
                    "description": "Validation error"
                  },
                  "429": {
                    "description": "Too many requests"
                  },
                  "500": {
                    "description": "Internal server error"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Authentication - Verify Code",
        "description": "Verify the 6-digit code and issue JWT tokens for user authentication. Creates or updates user and sets HttpOnly cookies.",
        "files": [
          "src/app/api/auth/verify-code/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/auth/verify-code": {
              "post": {
                "summary": "Verify code and login user",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "email": {
                            "type": "string"
                          },
                          "code": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "email",
                          "code"
                        ]
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Authentication successful",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "success": {
                              "type": "boolean"
                            },
                            "user": {
                              "type": "object"
                            }
                          }
                        }
                      }
                    }
                  },
                  "400": {
                    "description": "Invalid code"
                  },
                  "429": {
                    "description": "Rate limit exceeded"
                  },
                  "500": {
                    "description": "Internal server error"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "User Profile Management",
        "description": "Get and update current user profile. Handles email change with verification. Includes validation using Zod schemas.",
        "files": [
          "src/app/api/users/me/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/users/me": {
              "get": {
                "summary": "Get current user profile",
                "responses": {
                  "200": {
                    "description": "User profile",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            },
                            "firstName": {
                              "type": "string"
                            },
                            "lastName": {
                              "type": "string"
                            },
                            "role": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "401": {
                    "description": "Unauthorized"
                  },
                  "500": {
                    "description": "Internal server error"
                  }
                }
              },
              "put": {
                "summary": "Update user profile",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "firstName": {
                            "type": "string"
                          },
                          "lastName": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string"
                          },
                          "position": {
                            "type": "string"
                          },
                          "company": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Profile updated"
                  },
                  "400": {
                    "description": "Validation error"
                  },
                  "401": {
                    "description": "Unauthorized"
                  },
                  "409": {
                    "description": "Email already in use"
                  },
                  "500": {
                    "description": "Internal server error"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Organizations Management",
        "description": "Full CRUD operations for organizations with complete business requisites (INN, KPP, OGRN, bank details, addresses, etc.). Users can have multiple organizations.",
        "files": [
          "src/app/api/organizations/route.ts",
          "src/app/api/organizations/[id]/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/organizations": {
              "get": {
                "summary": "List user organizations",
                "responses": {
                  "200": {
                    "description": "List of organizations",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  },
                  "401": {
                    "description": "Unauthorized"
                  }
                }
              },
              "post": {
                "summary": "Create organization",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "name_full": {
                            "type": "string"
                          },
                          "inn": {
                            "type": "string"
                          },
                          "address_legal": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "201": {
                    "description": "Organization created"
                  },
                  "400": {
                    "description": "Validation error"
                  },
                  "401": {
                    "description": "Unauthorized"
                  }
                }
              }
            },
            "/api/organizations/{id}": {
              "get": {
                "summary": "Get organization by ID",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Organization details"
                  },
                  "401": {
                    "description": "Unauthorized"
                  },
                  "404": {
                    "description": "Not found"
                  }
                }
              },
              "put": {
                "summary": "Update organization",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Organization updated"
                  },
                  "400": {
                    "description": "Validation error"
                  },
                  "404": {
                    "description": "Not found"
                  }
                }
              },
              "delete": {
                "summary": "Delete organization",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Deleted successfully"
                  },
                  "404": {
                    "description": "Not found"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Documents Management",
        "description": "Create and manage documents with template support. Implements demo limits and access period checks. Documents can be associated with organizations.",
        "files": [
          "src/app/api/documents/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/documents": {
              "get": {
                "summary": "List user documents",
                "responses": {
                  "200": {
                    "description": "List of documents",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  },
                  "401": {
                    "description": "Unauthorized"
                  }
                }
              },
              "post": {
                "summary": "Create new document",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "organizationId": {
                            "type": "string"
                          },
                          "templateCode": {
                            "type": "string"
                          },
                          "title": {
                            "type": "string"
                          },
                          "bodyText": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "templateCode"
                        ]
                      }
                    }
                  }
                },
                "responses": {
                  "201": {
                    "description": "Document created"
                  },
                  "400": {
                    "description": "Validation error"
                  },
                  "401": {
                    "description": "Unauthorized"
                  },
                  "403": {
                    "description": "Access denied or limit exceeded"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Templates Management",
        "description": "Public API to get enabled document templates. Used for displaying available document types to users.",
        "files": [
          "src/app/api/templates/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/templates": {
              "get": {
                "summary": "Get enabled templates",
                "responses": {
                  "200": {
                    "description": "List of enabled templates",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  },
                  "500": {
                    "description": "Internal server error"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Document Generation - DOCX",
        "description": "Generate DOCX files from document text and requisites. Formats document with proper headings, paragraphs, and organization details.",
        "files": [
          "src/app/api/documents/generate-docx/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/documents/generate-docx": {
              "post": {
                "summary": "Generate DOCX file",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "bodyText": {
                            "type": "string"
                          },
                          "templateName": {
                            "type": "string"
                          },
                          "requisites": {
                            "type": "object"
                          },
                          "organization": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "bodyText"
                        ]
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "DOCX file",
                    "content": {
                      "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
                        "schema": {
                          "type": "string",
                          "format": "binary"
                        }
                      }
                    }
                  },
                  "400": {
                    "description": "Invalid request"
                  },
                  "401": {
                    "description": "Unauthorized"
                  },
                  "500": {
                    "description": "Generation error"
                  }
                }
              }
            }
          }
        }
      }
    ]
  }
}
